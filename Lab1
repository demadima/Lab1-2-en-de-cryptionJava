ЛАБОРАТОРНАЯ РАБОТА № 1
ИССЛЕДОВАНИЕ ШИФРОВ ПЕРЕСТАНОВКИ
1.1    Цель работы
Ознакомиться с различными шифрами перестановки и методами их дешифрования.
1.2    Теоретические сведения
1.2.1 Криптология – тайная (секретная) связь. От греческих слов “cryptos” – тайный, “logos” – сообщение. Она подразделяется на два направления – криптографию и криптоанализ.
Шифр – совокупность обратимых преобразований множества открытых данных на множество зашифрованных данных, задаваемых ключом и алгоритмом криптографического преобразования.
Ключ – это конкретное секретное состояние некоторых параметров алгоритма криптографического преобразования данных, обеспечивающее выбор только одного варианта из всех возможных для данного алгоритма.
Для обеспечения дополнительной скрытности можно повторно зашифровать сообщение, которое уже прошло шифрование. Такой метод шифрования называется двойной перестановкой. В случае двойной перестановки столбцов и строк таблицы перестановки определяются отдельно для столбцов и отдельно для строк. Сначала в таблицу записывается текст сообщения, а потом поочередно переставляются столбцы, а затем строки.
При расшифровании порядок перестановок должен быть обратным.

1.3    Описание программы

Программа, для данной лабораторной работы была написана для шифрования и дешифрования краткого предложения из 25 символов с помощью метода двойной перестановки. Для зашифровки предложения нужно ввести 2 ключевых слова, которые сделают невозможным прочтение предложения.  Результат работы программы в виде зашифрованного текста будет выведен на консоль.

1.4   Выполнение работы
         1.4.1 Класс encryption
package lab1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class encryption {

	public char temp = 0;

	
	public char[] keyColnArray = null;
	public char[] keyRowArray = null;

	public int[] IDlistColn = new int[5];
	public int[] IDlistRow = new int[5];
	public List<Character> text = new ArrayList<>();
	//Текст для проверки: ПриветМаксимКакТебяЗовут?
	// public static char[] alfavit = { 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з',
	// 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р',
	// 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я' };

	public char[] array = null;
	public char[][] mass = new char[5][5];

	public List<Character> Encrypt(String str ,String keyColn , String keyRow) {
		// Ваше предложение
		System.out.println("");
		array = str.toCharArray();
		// Выводим правильно ли мы разбили предложение
		int i = 0;
		//System.out.println(Arrays.toString(array));
		// Засовываем наше предложение в двумерный массив
		System.out.println("Двумерный массив выглядит так:");
		System.out.println(" ");		
		for (int y = 0; y < mass.length; y++) {
			for (int x = 0; x < mass[y].length; x++) {
				if (i < array.length) {
					mass[y][x] = array[i];
				}
				System.out.print(mass[y][x] + " ");
				i++;
			}
			System.out.println();
		}
		// Разбиваем первый ключ на буквы
		for (int k = 0; k < keyColn.length(); k++) {
			keyColnArray = keyColn.toCharArray();
			// Выводим правильно ли мы разбили предложение
			System.out.print(keyColnArray[k] + "  ");
		}
		System.out.println("");
		// Разбиваем второй ключ на буквы
		for (int k = 0; k < keyRow.length(); k++) {
			keyRowArray = keyRow.toCharArray();
			// Выводим правильно ли мы разбили предложение
			System.out.print(keyRowArray[k] + "  ");
		}
		System.out.println("");
		// Узнаем айди каждой буквы в первом ключе
		for (i = 0; i < keyColnArray.length; i++) {
			IDlistColn[i] = (int) keyColnArray[i];
			//System.out.print(+listColn[i] + "  ");
		}
		System.out.println("");

		// Узнаем айди каждой буквы во втором ключе
		for (i = 0; i < keyRowArray.length; i++) {
			IDlistRow[i] = (int) keyRowArray[i];
			//System.out.print(listRow[i] + "  ");
		}
		System.out.println("");
		// Шифрование и сортировка
		sortColn(IDlistColn, mass);
		// Вывод результата
		System.out.println("Вывод результата после перестановки колонок: ");
		System.out.println("");
		print(mass);
		
		sortRow(IDlistRow, mass);
		// вывод результата
		System.out.println("Вывод результата после перестановки строк: ");
		System.out.println("");
		print(mass);
		// Выводим двумерный массив после обработки первым ключем

		System.out.println("Зашифрованный текст: ");

		print(mass);
		//Добавляем шифрованный текст в list
		for (int y = 0; y < mass.length; y++) {
			for (int x = 0; x < mass[y].length; x++) {
				text.add(mass[y][x]);				
			}	
		}
		
		System.out.println("Выводим зашифрованный текст: ");
		for ( i = 0; i < text.size(); i++) {
			System.out.print(text.get(i));
		}		
		return text;
	}

	// Функция шифрует текст по первому ключу
	private char[][] sortRow(int listRow[], char mass[][]) {
		int tempTop = 0;
		for (int j = 0; j < listRow.length; j++) {
			for (int i = 0; i < listRow.length - 1; i++) {
				// System.out.println("Проход , смотрим i = " + i);
				// Проверяем больше ли следующее число в массиве
				if (listRow[i] > listRow[i + 1]) {
					// System.out.println("Это list[i] = " + list[i] + "> list[i+1] = " + list[i +
					// 1]);
					tempTop = listRow[i + 1];
					listRow[i + 1] = listRow[i];
					listRow[i] = tempTop;

					//System.out.println(Arrays.toString(listRow));
					// Меняем местами столбцы в двумерном массиве
					for (int coln = 0; coln < listRow.length; coln++) {
						// System.out.println("i =" + i + "i+1 =" + (i + 1));

						temp = mass[i][coln];
						mass[i][coln] = mass[i + 1][coln];
						mass[i + 1][coln] = temp;

					}
				
				}
			}

		}

		System.out.println(Arrays.toString(listRow));
		return mass;
	}

	// Функция шифрует текст по первому ключу
	private char[][] sortColn(int listColn[], char mass[][]) {
		int tempTop = 0;
		for (int j = 0; j < listColn.length; j++) {
			for (int i = 0; i < listColn.length - 1; i++) {
				// System.out.println("Проход , смотрим i = " + i);
				// Проверяем больше ли следующее число в массиве
				if (listColn[i] > listColn[i + 1]) {
					// System.out.println("Это list[i] = " + list[i] + "> list[i+1] = " + list[i +
					// 1]);
					tempTop = listColn[i + 1];
					listColn[i + 1] = listColn[i];
					listColn[i] = tempTop;

					//System.out.println(Arrays.toString(listColn));
					// Меняем местами столбцы в двумерном массиве
					for (int row = 0; row < listColn.length; row++) {
						// System.out.println("i =" + i + "i+1 =" + (i + 1));

						temp = mass[row][i];
						mass[row][i] = mass[row][i + 1];
						mass[row][i + 1] = temp;

					}
					

				}
			}

		}

		System.out.println(Arrays.toString(listColn));
		return mass;
	}
	//Выводим двумерный массив
	void print (char[][] mass) {
		for (int y = 0; y < mass.length; y++) {
			for (int x = 0; x < mass[y].length; x++) {
				System.out.print(mass[y][x] + " ");
			}
			System.out.println();
		}
	}

}

    1.4.2 Класс decryption
package lab1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class decryption {
	public char temp = 0;
	public int[] sortKeyColn = new int[5];;
	public int[] sortKeyRow = new int[5];;

	public char[] keyColnArray = null;
	public char[] keyRowArray = null;
	
	public int[] TempIDlistColn = new int[5];
	public int[] TempIDlistRow = new int[5];
	
	public int[] IDlistColn = new int[5];
	public int[] IDlistRow = new int[5];
	public List<Character> text = new ArrayList<>();
	// Текст для проверки: веиПракКимяЗбТексатМт?уов
	// public static char[] alfavit = { 'а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з',
	// 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р',
	// 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'ъ', 'ы', 'ь', 'э', 'ю', 'я' };

	public char[] array = null;
	public char[][] mass = new char[5][5];
	public char[][] newmass = new char[5][5];
	public char[][] newmass3 = new char[5][5];


	public List<Character> Decryption(String str, String keyColn, String keyRow) {
		// Ваше предложение
		System.out.println("");
		array = str.toCharArray();
		// Выводим правильно ли мы разбили предложение
		int i = 0;
		// System.out.println(Arrays.toString(array));
		// Засовываем наше предложение в двумерный массив
		System.out.println("Двумерный массив выглядит так:");
		System.out.println(" ");
		for (int y = 0; y < mass.length; y++) {
			for (int x = 0; x < mass[y].length; x++) {
				if (i < array.length) {
					mass[y][x] = array[i];
				}
				System.out.print(mass[y][x] + " ");
				i++;
			}
			System.out.println();
		}
		// Разбиваем первый ключ на буквы
		for (int k = 0; k < keyColn.length(); k++) {
			keyColnArray = keyColn.toCharArray();
			// Выводим правильно ли мы разбили предложение
			System.out.print(keyColnArray[k] + "  ");
		}
		System.out.println("");
		// Разбиваем второй ключ на буквы
		for (int k = 0; k < keyRow.length(); k++) {
			keyRowArray = keyRow.toCharArray();
			// Выводим правильно ли мы разбили предложение
			System.out.print(keyRowArray[k] + "  ");
		}
		System.out.println("");
		// Узнаем айди каждой буквы в первом ключе
		for (i = 0; i < keyColnArray.length; i++) {
			IDlistColn[i] = (int) keyColnArray[i];
			// System.out.print(+listColn[i] + " ");
		}
		System.out.println("");

		// Узнаем айди каждой буквы во втором ключе
		for (i = 0; i < keyRowArray.length; i++) {
			IDlistRow[i] = (int) keyRowArray[i];
			// System.out.print(listRow[i] + " ");
		}
		System.out.println("");
		// Шифрование и сортировка
		// Сортируем ключ по колонкам
		System.out.println("ДО:" + Arrays.toString(IDlistColn));
		System.out.println("Вывод результата после сортировки ключа по колонкам: ");
		TempIDlistColn = Arrays.copyOf(IDlistColn, IDlistColn.length);
		sortKeyColn = Arrays.copyOf(sortKey(IDlistColn), IDlistColn.length );
		IDlistColn = Arrays.copyOf(TempIDlistColn, TempIDlistColn.length);;

		// Сортируем ключ по строкам
		System.out.println("ДО: " + Arrays.toString(IDlistRow));
		System.out.println("Вывод результата после сортировки ключа по строкам: ");
		
		TempIDlistRow = Arrays.copyOf(IDlistRow, IDlistRow.length);
		sortKeyRow = Arrays.copyOf(sortKey(IDlistRow), IDlistRow.length );
		IDlistRow = Arrays.copyOf(TempIDlistRow, TempIDlistRow.length);;
		
		// Сортируем по второму ключу
		sortRow(IDlistRow, mass, sortKeyRow,newmass);
		
		print(newmass);
		// Сортируем по первому ключу
		sortColn(IDlistColn, newmass, sortKeyColn ,newmass3);
		print(newmass3);
		
		
		
		// Выводим двумерный массив после обработки первым ключем
		System.out.println("Зашифрованный текст: ");
		print(newmass3);
		
		// Добавляем шифрованный текст в list
		for (int y = 0; y < newmass3.length; y++) {
			for (int x = 0; x < newmass3[y].length; x++) {
				text.add(newmass3[y][x]);
			}
		}

		System.out.println("Выводим зашифрованный текст: ");
		for (i = 0; i < text.size(); i++) {
			System.out.print(text.get(i));
		}
		return text;
	}

	// Функция шифрует текст по второму ключу
	private char[][] sortColn(int IDlistColn[], char newmass[][], int sortKeyColn[],char newmass3[][]) {
		
		System.out.println("Сортируем по колонкам");
		int tempTop = 0;
		for (int j = 0; j < IDlistColn.length; j++) {
			for (int i = 0; i < IDlistColn.length; i++) {
				// Проверяем больше ли следующее число в массиве
				System.out.println(Arrays.toString(IDlistColn));
				System.out.println(Arrays.toString(sortKeyColn));
				System.out.println("IDlistColn[j] = "+ IDlistColn[j] + " ;sortKeyColn[j] = "+ sortKeyColn[i]);
				if (IDlistColn[j] == sortKeyColn[i]) {
					System.out.println("Yes");
				
					// Меняем местами столбцы в двумерном массиве
					for (int row = 0; row < IDlistRow.length; row++) {
						// System.out.println("i =" + i + "i+1 =" + (i + 1));
						newmass3[row][j] = newmass[row][i];
					}
					print(newmass3);
				}
			}
		}
		System.out.println(Arrays.toString(IDlistColn));
		return newmass3;
	}

	// Функция шифрует текст по второму ключу
	private char[][] sortRow(int IDlistRow[], char mass[][], int sortKeyRow[] , char newmass[][]) {
		
		System.out.println("Сортируем по строкам");
		int tempTop = 0;
		for (int j = 0; j < IDlistRow.length; j++) {
			for (int i = 0; i < IDlistRow.length; i++) {
				System.out.println(Arrays.toString(IDlistRow));
				System.out.println(Arrays.toString(sortKeyRow));
				System.out.println("IDlistRow[j] = "+ IDlistRow[j] + " ;sortKeyRow[j] = "+ sortKeyRow[i]);
				// Проверяем больше ли следующее число в массиве
				if (IDlistRow[j] == sortKeyRow[i]) {
					System.out.println("Yes");
					
					// Меняем местами столбцы в двумерном массиве
					for (int coln = 0; coln < IDlistColn.length; coln++) {
						// System.out.println("i =" + i + "i+1 =" + (i + 1));
						
						newmass[j][coln] = mass[i][coln];
				

					}
					print(newmass);
				}
			}

		}
		
		
		
		
		System.out.println(Arrays.toString(IDlistRow));
		return newmass;
	}

	// Функция cортировки ключей
	private int[] sortKey(int IDlist[]) {
		int tempTop = 0;
		for (int j = 0; j < IDlist.length; j++) {
			for (int i = 0; i < IDlist.length - 1; i++) {
				// System.out.println("Проход , смотрим i = " + i);
				// Проверяем больше ли следующее число в массиве
				if (IDlist[i] > IDlist[i + 1]) {
					// System.out.println("Это list[i] = " + list[i] + "> list[i+1] = " + list[i +
					// 1]);
					tempTop = IDlist[i + 1];
					IDlist[i + 1] = IDlist[i];
					IDlist[i] = tempTop;
				}
			}

		}

		System.out.println(Arrays.toString(IDlist));
		return IDlist;
	}

	// Выводим двумерный массив
	void print(char[][] mass) {
		for (int y = 0; y < mass.length; y++) {
			for (int x = 0; x < mass[y].length; x++) {
				System.out.print(mass[y][x] + " ");
			}
			System.out.println();
		}
	}

}

    1.4.3 Класс main
package lab1;

import java.awt.BufferCapabilities;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class main {
	
	public static void main(String[] args) {
		System.out.println("1 - шифруем ; 2 - дешифруем");
		Scanner scan = new Scanner(System.in);
		Integer n = scan.nextInt();
		
		
		encryption E = new encryption();
		decryption D = new decryption();
		System.out.println("1)Введите текст");
		BufferedReader str = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("2)Введите 1 ключ");
		BufferedReader keyColn = new BufferedReader(new InputStreamReader(System.in));
	
		System.out.println("3)Введите 2 ключ");
		BufferedReader keyRow = new BufferedReader(new InputStreamReader(System.in));	
		

		
		switch(n) {
	    case 1: 
	    	try {
				E.Encrypt(str.readLine(),keyColn.readLine(),keyRow.readLine());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;
		case 2: 
			try {
				D.Decryption(str.readLine(),keyColn.readLine(),keyRow.readLine());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			break;		
		default: 
		    System.out.println("Не правельный ввод");;
		    break;
	}
		
		
		
	
	}
	
	
}

 
Рисунок 1.1 – Работа программы

 

Рисунок 1.2 – Работа программы

1.5    Выводы
В данной лабораторной работе мы научились работе с разными типами шифрования, а именно написали программу для шифрования и расшифрования предложения методом двойной перестановки.



